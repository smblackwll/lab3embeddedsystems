;
; Lab3.asm
;
; Created: 2/28/2023 12:42:02 PM
; Author : Xinyi Yuan
;

; configure PC0, PC1 as input for RPG channel a and channel b

cbi DDRC, 1			; channel a
cbi DDRC, 0			; channel b
; configure PB0 as input for pushbutton

; output pins for 7 segment display
sbi DDRB, 3
sbi DDRB, 2
sbi DDRB, 1
; set PB0 input (push button)
cbi DDRB, 0 
; set PB5 as output
sbi DDRB,5

.equ disp0 = 0x3F
.equ disp1 = 0x6
.equ disp2 = 0x5B
.equ disp3 = 0x4F
.equ disp4 = 0x66
.equ disp5 = 0x6D
.equ disp6 = 0x7D
.equ disp7 = 0x7
.equ disp8 = 0x7F
.equ disp9 = 0x6F
.equ dispa = 0b1110111
.equ dispb = 0b1111100
.equ dispc = 0b0111001
.equ dispd = 0b1011110
.equ dispe = 0b1111001
.equ dispf = 0b1110001
.equ dispsign = 0b1000000
.equ dispdot = 0b10000000
.equ dispdash = 0b1000

.def tmp1 = R23
.def tmp2 = R24		
.def counter = R20

ldi R29, 84		  // how many time delayLoop will run through
ldi R16, 0x00	  // RPG pulse sequence
ldi R21, 0x00	  // copy of R16 when storing the sequence
ldi R25, 0x00	  // stores the value should be on the led display when interacting with RPG
ldi R18, dispsign // R18 stores the value that will be displayed
ldi R28, 0x01	  // 1 indicates the correct code for user input
clr R27

; Replace with your application code

start:
	cbi PORTB,5			// turn off the LED L
	rcall display
	rjmp poll2		
	rjmp start

display: ; backup used registers on stack
	push R18
	push R17
	in R17, SREG
	push R17
	ldi R17, 8 ; loop --> test all 8 bits
loop:
    rol R18
    BRCS set_ser_in_1 ; branch if Carry is set; put code here to set SER to 0
	cbi PORTB,3
	rjmp end
 
set_ser_in_1:
	sbi PORTB,3
end:
	sbi PORTB,2
	cbi PORTB,2
	; put code here to generate SRCLK pulse...
	dec R17
	brne loop
	; put code here to generate RCLK pulse
	sbi PORTB,1
	cbi PORTB,1
	; restore registers from stack
	pop R17
	out SREG, R17
	pop R17
	pop R18
	ret 


// check the RPG pulse sequence
pollRPG:
	rcall readRPG
	cpi R16, 0b01001011
	breq clockwise_turn
	cpi R16, 0b10000111
	breq counterclock_turn
	rjmp start

clockwise_turn:
	cpi R25, 0x0F
	brlt count_up
	rjmp start
	count_up:
	inc R25
	rjmp count_to_digital

counterclock_turn:
	cpi R25, 0x00
	brne count_down
	rjmp start
	count_down:
	dec R25
	rjmp count_to_digital

// 
count_to_digital:
	cpi R25, 0x00
    breq check_0
    cpi R25, 0x01
    breq check_1
    cpi R25, 0x02
    breq check_2
    cpi R25, 0x03
    breq check_3
    cpi R25, 0x04
    breq check_4
    cpi R25, 0x05
    breq check_5
    cpi R25, 0x06
    breq check_6
    cpi R25, 0x07
    breq check_7
    cpi R25, 0x08
    breq check_8
    cpi R25, 0x09
    breq check_9
	cpi R25, 0x0A
	breq check_a
	cpi R25, 0x0B
	breq check_b
	cpi R25, 0x0C
	breq check_c
	cpi R25, 0x0D
	breq check_d
	cpi R25, 0x0E
	breq check_e
	cpi R25, 0x0F
	breq check_f

check_0:
	clr R18
	ldi R18, disp0
	rjmp start
midway2:
	rjmp start
check_1:
	clr R18
	ldi R18, disp1
	rjmp start
check_2:
	clr R18
	ldi R18, disp2
	rjmp start
check_3:
	clr R18
	ldi R18, disp3
	rjmp start
check_4:
	clr R18
	ldi R18, disp4
	rjmp start
check_5:
	clr R18
	ldi R18, disp5
	rjmp start
check_6:
	clr R18
	ldi R18, disp6
	rjmp start
check_7:
	clr R18
	ldi R18, disp7
	rjmp start
check_8:
	clr R18
	ldi R18, disp8
	rjmp start
check_9:
	clr R18
	ldi R18, disp9
	rjmp start
check_a:
	clr R18
	ldi R18, dispa
	rjmp start
check_b:
	clr R18
	ldi R18, dispb
	rjmp start
check_c:
	clr R18
	ldi R18, dispc
	rjmp start
check_d:
	clr R18
	ldi R18, dispd
	rjmp start
check_e:
	clr R18
	ldi R18, dispe
	rjmp start
check_f:
	clr R18
	ldi R18, dispf
	rjmp start
check_sign:
	clr R18
	ldi R18, dispsign
	rjmp start
check_dot:
	clr R18
	ldi R18, dispdot
	rjmp start
check_dash:
	clr R18
	ldi R18, dispdash
	rjmp start

jumpClockwise:
	rjmp clockwise_turn

jumpCounter:
	rjmp counterclock_turn

; read all 4 rpg pulses into R16
readRPG:
	clr R16
	clr R21
	in R16, PINC
	andi R16, 0x03
	lsl R16
	lsl R16
	mov R21, R16
	in R16, PINC
	andi R16, 0x03
	or R16, R21
	lsl R16
	lsl R16
	mov R21, R16
	in R16, PINC
	andi R16, 0x03
	or R16, R21
	lsl R16
	lsl R16
	mov R21, R16
	in R16, PINC
	andi R16, 0x03
	or R16, R21
	ret


poll2:
	rcall readRPG2
	mov R19, R22
	andi R19, 0x3
	cp R16, R19 
	brne shiftAB
	ldi R30, 12
	sbis PINB, 0
	rcall wait_loop
	rjmp poll2

// wait for 2 seconds
wait_loop:
	rcall delayLoop
	sbic PINB,0
	rjmp check_loop
	dec R30
	cpi R30, 0x00
	brne wait_loop
	clr R27
	rjmp reset
	ret


shiftAB:
	lsl R22
	lsl R22
	Or R22, R16
	rjmp compare

readRPG2:
	in R16, PINC
	andi r16,0x03
	ret

compare:
	cpi R22, 0b11010010
	breq jumpClockwise
	cpi R22, 0b11100001
	breq jumpCounter
	rjmp poll2

check_loop:
	cpi R27, 0x00
	breq check0
	cpi R27, 0x01
	breq check1
	cpi R27, 0x02
	breq check2
	cpi R27, 0x03
	breq check3
	cpi R27, 0x04
	breq check4
	ret

// correct sequence: 546f4
// check the code enetered
check0:
	inc R27
	cpi R25, 0x05
	breq poll2
	ldi R28, 0x00		; indicates the wrong sequence
	ret
check1:
	inc R27
	cpi R25, 0x04
	breq poll2
	ldi R28, 0x00
	ret
check2:
	inc R27
	cpi R25, 0x06
	breq poll2
	ldi R28, 0x00
	ret
check3: 
	inc R27
	cpi R25, 0x0f
	breq poll2
	ldi R28, 0x00
	ret
check4:
	cpi R25, 0x04
	breq correct
	ldi R28, 0x00
	rjmp wrong


// Correct sequence, display dot on LED display and 
correct:
	cpi R28, 0x00
	breq wrong
	sbi PORTB,5
	clr R27
	ldi R18, dispdot
	clr R30
	ldi R30, 35
	rcall display
	rcall fivesecond
	ldi R28, 0x01
	
	rjmp start

// Wrong sequence
wrong:
	ldi R28, 0x01
	clr R27
	ldi R18, dispdash	
	rcall display			
	clr R30
	ldi R30, 58			// modify this value for the 9 second delay, around 9
	rcall ninesecond
	
	rjmp start

// produce a 5-second delay
fivesecond:
	rcall delayLoop
	dec R30
	cpi R30, 0x00
	brne fivesecond
	rjmp reset
	ret

// produce a 9-second delay
ninesecond:
	rcall delayLoop
	dec R30
	cpi R30, 0x00
	brne ninesecond
	rjmp reset
	ret

// reset the display to "-"
reset:
	clr R25
	ldi R18, dispsign
	rjmp start

// run this once to get 50.091 ms delay
delayLoop:
	ldi R23, 0x01		// tmp1
	ldi R24, 0x03		// prescaler, 64 
	ldi R20, 107		// counter
	out TCCR0B, R24
	rcall delay
	dec R29
	brne delayLoop
	ret

; Wait for TIMER0 to roll over.
delay:
	; Stop timer 0.
	in tmp1, TCCR0B		; Save configuration
	ldi tmp2, 0x00		; Stop timer 0
	out TCCR0B, tmp2
	; Clear overflow flag.
	in tmp2, TIFR0		; tmp <-- TIFR0
	sbr tmp2, 1 << TOV0	; clear TOV0, write logic 1
	out TIFR0, tmp2
	; Start timer with new initial count
	out TCNT0, counter	; Load counter
	out TCCR0B, tmp1	; Restart timer
wait:
	in tmp2, TIFR0		; tmp <-- TIFR0
	sbrs tmp2, TOV0		; Check overflow flag
	rjmp wait
	ret	
